temp
arr
y
x
arr
continue
temp
y
x
arr
continue
arr
continue
arr
continue
arr
continue
y
x
temp
continue
temp
y
x
continue
y
x
continue
y
x
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
continue
temp
y
x
continue
y
x
continue
y
x
continue
y
x
continue
y
x
continue
y
x
continue
y
x
continue
y
x
temp
continue
y
x
temp
continue
temp
continue
temp
y
x
continue
y
x
continue
temp
y
x
continue
temp
elem
y
x
continue
y
x
elem
continue
y
x
continue
y
x
continue
y
x
continue
y
x
arr
continue
arr
y
x
continue
y
x
continue
y
x
continue
y
x
continue
arr[x][y]
arr
continue
x-1 >= 0 && y >= 0
arr
y
x
continue
temp
elem
y
x
continue
elem
y
x
temp
subset
ans
arr
arr,
arr[x][y+1]
 x >= 0 && y+1 >= 0
x >= 0 && y-1 >= 0
x+1 >= 0 && y >= 0
x-1 >= 0 && y >= 0
continue
i >= 0 && j-1 >= 0
i+1 >= 0 && j >= 0
i-1 >= 0 && j >= 0
arr[i][j]
continue
arr[-1][0]
arr[i-1][j]
i-1
j
i
arr[i-1][j]
arr
continue
ans
continue
ans
continue
ans
and
arr_length
ind
subset
continue
subset
continue
subset
continue
arr
subset
continue
subset
subet
continue
subset
continue
subset
continue
arr
subset
continue
subset
continue
subset
continue
subset
continue
subset
continue
subset
continue
arr
subset
continue
arr
subset
continue
elem
continue
canBePlaced(elem, prevSlot, availbleSlot) || elem.nil?
elem.nil?
elem
continue
arr
elem
continue
elem
continue
elem
continue
arr
subset
continue
subset
arr
continue
arr
subset
continue
subset
arr
continue
subset
arr
continue
arr
continue
arr
continue
subset
continue
subset
continue
subset
continue
